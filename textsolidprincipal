S.O.L.I.D é um acronimo para os cinco princícios de design atrelados a orientação a objeto (OOD) dado por Robert C. Martin, popularmente conhecido como Uncle Bob. 

Esses princícpios, quando combinados, tornam o desenvolvimento de software algo fácil de ser mantido e estendido. Esses princípios também evitam a formação de códigos ruins, permitem uma rápida refatoração do código, e também fazem parte de uma forma ágil e adaptativa de desenvolvimento de software. 

S.O.L.I.D é padrão para;

O Acrônimo, quando expandido, pode parecer ser algo complicado, contudo é bem fácil de entender;

S - Princípio da Responabilidade Única.
O - Princípio da Abertura e Fechamento. 
L - Princípio de substituição de Liskov. 
I - Princípio da segregação de interface. 
D - Princípio da Inversão de Dependência. 

Se faz necessário olhar para cada um desses princípios de forma individual para compreender porque eles são tão importantes. 

S - Princípio da Responabilidade Única.

A classe deve ter apenas uma única razão para mudar, significa que a classe deve ter apenas uma única função. 

Por exemplo, suponha que temos uma certa configuração e nós precisamos que o sol irradie para todas as áreas. Isso parece ser bem simples.  

class Circle {
    public $radius;

    public function construct($radius) {
        $this->radius = $radius;
    }
}

class Square {
    public $length;

    public function construct($length) {
        $this->length = $length;
    }
}

Nós criamos as classes de configuração e se tem construtores que solicitam um dado parâmetro. Pŕoximo, se cria a classe AreaCalculator com a seguinte lógica.   

class AreaCalculator {

    protected $shapes;

    public function __construct($shapes = array()) {
        $this->shapes = $shapes;
    }

    public function sum() {
        // logic to sum the areas
    }

    public function output() {
        return implode('', array(
            "",
                "Sum of the areas of provided shapes: ",
                $this->sum(),
            ""
        ));
    }
}

Para usar a classe AreaCalculator, nós simplesmente devemos instanciar a classe em um array na estrutura da configuração, como mostrado a seguir; 

$shape = array(
    new Circle(2),
    new Square(5),
    new Square(6)
);

$areas = new AreaCalculator($shape);

echo $areas->output();


O problema com o método output é que a classe AreaCalculator tem um dado carga de lógica e de dados. Então o que o usuário deseja como saída, um json ou algo deste gênero? 

Toda essa lógica deve ser uma alça para classe de AreaCalculator, que é contra isso que o SRP desaprova. Então para resolver esse problema se faz necessário ter uma uma classe que trabalhe
com esses retornos. 

$shapes = array(
    new Circle(2),
    new Square(5),
    new Square(6)
);

$areas = new AreaCalculator($shapes);
$output = new SumCalculatorOutputter($areas);

echo $output->JSON();
echo $output->HAML();
echo $output->HTML();
echo $output->JADE();

Agora a forma do retorno está relacionado com a classe SumCalculatorOutputter.



Open-closed Principle

Os objetos devem ser abertos para para extensões, mas fechado para modificações. 

Isso simplesmente significa que uma classe deve ser facilmente extensível sem que seja modificada. Vamos ver a classe AreaCalculator, especialmente o método de soma; 

public function sum() {
    foreach($this->shapes as $shape) {
        if(is_a($shape, 'Square')) {
            $area[] = pow($shape->length, 2);
        } else if(is_a($shape, 'Circle')) {
            $area[] = pi() * pow($shape->radius, 2);
        }
    }

    return array_sum($area);
}

Se nós queremos o método esteja habilitado para soma de áreas de formas diferentes, nós devemos adicionar mais um bloco if/else e isso será contra o princípio Open/Close.

O método de soma pode ser melhorado se a logica para calcular a área for removida da forma do método de soma e se for atachada na forma da classe.

class Square {
    public $length;

    public function __construct($length) {
        $this->length = $length;
    }

    public function area() {
        return pow($this->length, 2);
    }
}

public function sum() {
    foreach($this->shapes as $shape) {
        $area[] = $shape->area();
    }

    return array_sum($area);
}

Agora nós queremos outra forma de classe e passar isto quando calculado a soma sem uma dada quebra de código. Contudo, agora outros problemas surgem, como nós sabemos que o objeto passado é AreaCalculator é de fato uma forma ou se a forma tem um método para calcular área. 

Código para realizar a interface é uma parte integral do SOLID, um rápido exemplo é uma criação de interface, que todo formato é implementado; 

interface ShapeInterface {
    public function area();
}

class Circle implements ShapeInterface {
    public $radius;

    public function __construct($radius) {
        $this->radius = $radius;
    }

    public function area() {
        return pi() * pow($this->radius, 2);
    }
}

"In our AreaCalculator sum method we can check if the shapes provided are actually instances of the ShapeInterface, otherwise we throw an exception:"

public function sum() {
    foreach($this->shapes as $shape) {
        if(is_a($shape, 'ShapeInterface')) {
            $area[] = $shape->area();
            continue;
        }

        throw new AreaCalculatorInvalidShapeException;
    }

    return array_sum($area);
}

Liskov Substitution Principle

Sendo que q(x) é um propriedade provada do objeto x tipo T. Então q(y) deve ser provada para objetos y do tipo S onde S é um subtipo de T. 

Tudo isso está afirmado é que tudo será classe subclass/derived deveria ser substituível por base/pai das classer. 

Ainda fazendo uso da classe AreaCalculator, pode-se dizer que existe uma classe chamada de VolumeCalculator que é filha da AreaCalculator.

class VolumeCalculator extends AreaCalulator {
    public function construct($shapes = array()) {
        parent::construct($shapes);
    }

    public function sum() {
        // logic to calculate the volumes and then return and array of output
        return array($summedData);
    }
}

Na classe SumCalculatorOutputter: 

class SumCalculatorOutputter {
    protected $calculator;

    public function __constructor(AreaCalculator $calculator) {
        $this->calculator = $calculator;
    }

    public function JSON() {
        $data = array(
            'sum' => $this->calculator->sum();
        );

        return json_encode($data);
    }

    public function HTML() {
        return implode('', array(
            '',
                'Sum of the areas of provided shapes: ',
                $this->calculator->sum(),
            ''
        ));
    }
}

Se nós tentarmos rodas esse exemplo, fica assim; 


$areas = new AreaCalculator($shapes);
$volumes = new AreaCalculator($solidShapes);

$output = new SumCalculatorOutputter($areas);
$output2 = new SumCalculatorOutputter($volumes);

O programa não está "grito", mas quando nós chamamos o método html no objeto $outut2, nó pegamos um erro de E_NOTICE informando sobre a conversão da string. 
Para resolver isso, em vez de retornar um array para o VolumeCalculator, nós podemos realizar a seguinte simplificação; 

public function sum() {
    // logic to calculate the volumes and then return and array of output
    return $summedData;
}

A soma dos dados como um float, double ou integer. 
